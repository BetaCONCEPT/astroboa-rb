While you can directly use the REST-based "Astroboa Resource API" from your Ruby projects using the net/http library or any one of the rest client libraries, Astroboa Ruby Client greatly eases your work.

The Ruby client allows you to read and write content in any local or remote astroboa repository with just a few lines of code.

== Install

=== For your project using bundler

Add to your Gemfile:

  gem "astroboa-rb"

and run at the command prompt:

  bundle install

=== or as a gem in your ruby environment

Run at the command prompt:

gem install astroboa-rb
 
To learn how to use the Ruby client read the documentation at http://www.astroboa.org/section/astroboa-ruby-client. 
You can instantly try the examples provided in the documentation without setting up your own repository since they use the online astroboa demo repository that holds books from the Gutenberg Project.

If you are eager to see how the client works find below some examples

EXAMPLE:

# encoding: utf-8
require 'astroboa-rb'

astroboaClient = Astroboa::Client.new('demo.betaconcept.com', 'demorepository')

astroboaClient.on_error do |exception|
  puts exception.message
end

# create a new text object
# createObject(objectHash, &exception_block)
my_new_text_resource = {"contentObjectTypeName" => "genericContentResourceObject", "profile" => {"title" => "Hello Panagiotis", "description" => "γειά σου παναγιώτη"}, "body" => 'Hello Panagiotis this my body'}
my_new_text_resource_id = astroboaClient.createObject my_new_text_resource
puts "created object with id: #{my_new_text_resource_id}" 

# getObject(idOrName, projectionPaths = nil, output = :hash, &exception_block)
# READ ASTROBOA OBJECT AS RUBY HASH
retrieved_text_resource = astroboaClient.getObject my_new_text_resource_id
puts "The retrieved resource is: #{retrieved_text_resource}"
puts retrieved_text_resource['profile']['title']

# READ ASTROBOA OBJECT AS RUBY OBJECT
retrieved_text_resource = astroboaClient.getObject(my_new_text_resource_id, nil, :object)  
puts "I retrieved the resource as object and the title is: #{retrieved_text_resource.profile.title}"
puts "The retrieved resource is: #{retrieved_text_resource}"

# updateObject(objectHash, updateLastModificationTime = true, &exception_block)
resource = {"contentObjectTypeName" => "genericContentResourceObject", "cmsIdentifier" => my_new_text_resource_id, "body" => "Updated Body Text with hello"}
response = astroboaClient.updateObject resource
puts "I updated the object and the response is: #{response}"


text_resource = astroboaClient.getObject my_new_text_resource_id
puts "I will read the updated resource back and the updated body is #{text_resource['body']}"

# Read object collections
# getObjectCollection(query, projectionPaths = nil, offset = 0, limit = 50, orderBy='profile.modified desc', output = :hash, &exception_block)
query = 'objectType="genericContentResourceObject" AND body CONTAINS "Hello"'
resource_collection = astroboaClient.getObjectCollection(query)

text_resources = resource_collection['resourceCollection']['resource']
found_id = nil
puts "Looking for resource #{my_new_text_resource_id}"
text_resources.each do |text_resource|
  puts text_resource['cmsIdentifier']
  if text_resource['cmsIdentifier'] == my_new_text_resource_id
    found_id = text_resource['cmsIdentifier']
    break
  end 
end
puts "found #{found_id}"



   

